/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Cie10 : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_id; 
		private string m_capitulo; 
		private string m_grupocie10; 
		private string m_causa; 
		private string m_subcausa; 
		private string m_codigo; 
		private string m_nombre; 
		private string m_descripcap; 
        //private double m_modif; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Cie10()
		{
			m_id = 0; 
			m_capitulo = String.Empty; 
			m_grupocie10 = String.Empty; 
			m_causa = String.Empty; 
			m_subcausa = String.Empty; 
			m_codigo = String.Empty; 
			m_nombre = String.Empty; 
			m_descripcap = String.Empty; 
            //m_modif = new double(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Cie10(
			int id)
			: this()
		{
			m_id = id;
			m_capitulo = String.Empty;
			m_grupocie10 = String.Empty;
			m_causa = String.Empty;
			m_subcausa = String.Empty;
			m_codigo = String.Empty;
			m_nombre = String.Empty;
			m_descripcap = String.Empty;
            //m_modif = null;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int Id
		{
			get { return m_id; }
			set
			{
				m_isChanged |= ( m_id != value ); 
				m_id = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Capitulo
		{
			get { return m_capitulo; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Capitulo", value, value.ToString());
				
				m_isChanged |= (m_capitulo != value); m_capitulo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Grupocie10
		{
			get { return m_grupocie10; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Grupocie10", value, value.ToString());
				
				m_isChanged |= (m_grupocie10 != value); m_grupocie10 = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Causa
		{
			get { return m_causa; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Causa", value, value.ToString());
				
				m_isChanged |= (m_causa != value); m_causa = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Subcausa
		{
			get { return m_subcausa; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Subcausa", value, value.ToString());
				
				m_isChanged |= (m_subcausa != value); m_subcausa = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Codigo
		{
			get { return m_codigo; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Codigo", value, value.ToString());
				
				m_isChanged |= (m_codigo != value); m_codigo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string DescripCap
		{
			get { return m_descripcap; }

			set	
			{	
				if(  value != null &&  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for DescripCap", value, value.ToString());
				
				m_isChanged |= (m_descripcap != value); m_descripcap = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        //public double Modif
        //{
        //    get { return m_modif; }
        //    set
        //    {
        //        m_isChanged |= ( m_modif != value ); 
        //        m_modif = value;
        //    }

        //}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
