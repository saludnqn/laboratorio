/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.AutoAnalizador
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class MindrayResultado: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idmindrayresultado; 
		private string m_protocolo; 
		private DateTime m_fechaprotocolo; 
		private int m_iditemmindray; 
		private string m_descripcion; 
		private string m_unidadmedida; 
		private string m_valorobtenido; 
		private string m_tipovalor; 
		private DateTime m_fecharesultado; 
		private DateTime m_fecharegistro; 
		private int m_estado; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public MindrayResultado()
		{
			m_idmindrayresultado = 0; 
			m_protocolo = String.Empty; 
			m_fechaprotocolo = DateTime.MinValue; 
			m_iditemmindray = 0; 
			m_descripcion = String.Empty; 
			m_unidadmedida = String.Empty; 
			m_valorobtenido = String.Empty; 
			m_tipovalor = String.Empty; 
			m_fecharesultado = DateTime.MinValue; 
			m_fecharegistro = DateTime.MinValue; 
			m_estado = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public MindrayResultado(
			string protocolo, 
			DateTime fechaprotocolo, 
			int iditemmindray, 
			string descripcion, 
			string unidadmedida, 
			string valorobtenido, 
			string tipovalor, 
			DateTime fecharesultado, 
			DateTime fecharegistro, 
			int estado)
			: this()
		{
			m_protocolo = protocolo;
			m_fechaprotocolo = fechaprotocolo;
			m_iditemmindray = iditemmindray;
			m_descripcion = descripcion;
			m_unidadmedida = unidadmedida;
			m_valorobtenido = valorobtenido;
			m_tipovalor = tipovalor;
			m_fecharesultado = fecharesultado;
			m_fecharegistro = fecharegistro;
			m_estado = estado;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdMindrayResultado
		{
			get { return m_idmindrayresultado; }
			set
			{
				m_isChanged |= ( m_idmindrayresultado != value ); 
				m_idmindrayresultado = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Protocolo
		{
			get { return m_protocolo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Protocolo", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Protocolo", value, value.ToString());
				
				m_isChanged |= (m_protocolo != value); m_protocolo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaProtocolo
		{
			get { return m_fechaprotocolo; }
			set
			{
				m_isChanged |= ( m_fechaprotocolo != value ); 
				m_fechaprotocolo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdItemMindray
		{
			get { return m_iditemmindray; }
			set
			{
				m_isChanged |= ( m_iditemmindray != value ); 
				m_iditemmindray = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Descripcion
		{
			get { return m_descripcion; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Descripcion", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Descripcion", value, value.ToString());
				
				m_isChanged |= (m_descripcion != value); m_descripcion = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string UnidadMedida
		{
			get { return m_unidadmedida; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for UnidadMedida", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for UnidadMedida", value, value.ToString());
				
				m_isChanged |= (m_unidadmedida != value); m_unidadmedida = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ValorObtenido
		{
			get { return m_valorobtenido; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for ValorObtenido", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for ValorObtenido", value, value.ToString());
				
				m_isChanged |= (m_valorobtenido != value); m_valorobtenido = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string TipoValor
		{
			get { return m_tipovalor; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for TipoValor", value, "null");
				
				if(  value.Length > 5)
					throw new ArgumentOutOfRangeException("Invalid value for TipoValor", value, value.ToString());
				
				m_isChanged |= (m_tipovalor != value); m_tipovalor = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaResultado
		{
			get { return m_fecharesultado; }
			set
			{
				m_isChanged |= ( m_fecharesultado != value ); 
				m_fecharesultado = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
			
		/// <summary>
		/// 0: Por Defecto - 1: Grabada en LIS
		/// </summary>
		public int Estado
		{
			get { return m_estado; }
			set
			{
				m_isChanged |= ( m_estado != value ); 
				m_estado = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
