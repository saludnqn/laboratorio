/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.AutoAnalizador
{
    /// <summary>
    ///	Generated by MyGeneration using the NHibernate Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class MetrolabItem: Business.BaseDataAccess
    {

        #region Private Members
        private bool m_isChanged;

        private int m_idmetrolabitem;
        private string m_idmetrolab;
        private int m_iditem;
        private string m_prefijo;
        private bool m_habilitado;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public MetrolabItem()
        {
            m_idmetrolabitem = 0;
            m_idmetrolab = String.Empty;
            m_iditem = 0;
            m_prefijo = String.Empty;
            m_habilitado = false;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Required Fields Only Constructor
        /// <summary>
        /// required (not null) fields only constructor
        /// </summary>
        public MetrolabItem(
            string idmetrolab,
            int iditem,
            string prefijo,
            bool habilitado)
            : this()
        {
            m_idmetrolab = idmetrolab;
            m_iditem = iditem;
            m_prefijo = prefijo;
            m_habilitado = habilitado;
        }
        #endregion // End Required Fields Only Constructor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>
        public int IdMetrolabItem
        {
            get { return m_idmetrolabitem; }
            set
            {
                m_isChanged |= (m_idmetrolabitem != value);
                m_idmetrolabitem = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string IdMetrolab
        {
            get { return m_idmetrolab; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for IdMetrolab", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for IdMetrolab", value, value.ToString());

                m_isChanged |= (m_idmetrolab != value); m_idmetrolab = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public int IdItem
        {
            get { return m_iditem; }
            set
            {
                m_isChanged |= (m_iditem != value);
                m_iditem = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string Prefijo
        {
            get { return m_prefijo; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Prefijo", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Prefijo", value, value.ToString());

                m_isChanged |= (m_prefijo != value); m_prefijo = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Habilitado
        {
            get { return m_habilitado; }
            set
            {
                m_isChanged |= (m_habilitado != value);
                m_habilitado = value;
            }

        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return m_isChanged; }
        }

        #endregion
    }
}
