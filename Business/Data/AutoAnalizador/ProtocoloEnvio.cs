/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.AutoAnalizador
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class ProtocoloEnvio: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idtempprotocoloenvio;
        private int m_idmuestra;
		private string m_numeroprotocolo; 
		private string m_tipomuestra; 
		private string m_iditem; 
		private string m_paciente; 
		private string m_anionacimiento; 
		private string m_sexo; 
		private string m_sectorsolicitante; 
		private string m_medicosolicitante; 
		private string m_urgente;
        private string m_equipo;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ProtocoloEnvio()
		{
			m_idtempprotocoloenvio = 0;
            m_idmuestra = 0;
			m_numeroprotocolo = String.Empty; 
			m_tipomuestra = String.Empty; 
			m_iditem = String.Empty; 
			m_paciente = String.Empty; 
			m_anionacimiento = String.Empty; 
			m_sexo = String.Empty; 
			m_sectorsolicitante = String.Empty; 
			m_medicosolicitante = String.Empty; 
			m_urgente = String.Empty;
            m_equipo = String.Empty;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ProtocoloEnvio(
            int idmuestra,
			string numeroprotocolo, 
			string tipomuestra, 
			string iditem, 
			string paciente, 
			string anionacimiento, 
			string sexo, 
			string sectorsolicitante, 
			string medicosolicitante, 
			string urgente,
            string equipo)
			: this()
		{
            m_idmuestra = idmuestra;
			m_numeroprotocolo = numeroprotocolo;
			m_tipomuestra = tipomuestra;
			m_iditem = iditem;
			m_paciente = paciente;
			m_anionacimiento = anionacimiento;
			m_sexo = sexo;
			m_sectorsolicitante = sectorsolicitante;
			m_medicosolicitante = medicosolicitante;
			m_urgente = urgente;
            m_equipo = equipo;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdTempProtocoloEnvio
		{
			get { return m_idtempprotocoloenvio; }
			set
			{
				m_isChanged |= ( m_idtempprotocoloenvio != value ); 
				m_idtempprotocoloenvio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        /// 
        public int IdMuestra
        {
            get { return m_idmuestra; }
            set
            {
                m_isChanged |= (m_idmuestra != value);
                m_idmuestra = value;
            }

        }
		public string NumeroProtocolo
		{
			get { return m_numeroprotocolo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for NumeroProtocolo", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for NumeroProtocolo", value, value.ToString());
				
				m_isChanged |= (m_numeroprotocolo != value); m_numeroprotocolo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string TipoMuestra
		{
			get { return m_tipomuestra; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for TipoMuestra", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for TipoMuestra", value, value.ToString());
				
				m_isChanged |= (m_tipomuestra != value); m_tipomuestra = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Iditem
		{
			get { return m_iditem; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Iditem", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Iditem", value, value.ToString());
				
				m_isChanged |= (m_iditem != value); m_iditem = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Paciente
		{
			get { return m_paciente; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Paciente", value, "null");
				
				if(  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Paciente", value, value.ToString());
				
				m_isChanged |= (m_paciente != value); m_paciente = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string AnioNacimiento
		{
			get { return m_anionacimiento; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for AnioNacimiento", value, "null");
				
				if(  value.Length > 8)
					throw new ArgumentOutOfRangeException("Invalid value for AnioNacimiento", value, value.ToString());
				
				m_isChanged |= (m_anionacimiento != value); m_anionacimiento = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Sexo
		{
			get { return m_sexo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Sexo", value, "null");
				
				if(  value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Sexo", value, value.ToString());
				
				m_isChanged |= (m_sexo != value); m_sexo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string SectorSolicitante
		{
			get { return m_sectorsolicitante; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for SectorSolicitante", value, "null");
				
				if(  value.Length > 150)
					throw new ArgumentOutOfRangeException("Invalid value for SectorSolicitante", value, value.ToString());
				
				m_isChanged |= (m_sectorsolicitante != value); m_sectorsolicitante = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string MedicoSolicitante
		{
			get { return m_medicosolicitante; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for MedicoSolicitante", value, "null");
				
				if(  value.Length > 150)
					throw new ArgumentOutOfRangeException("Invalid value for MedicoSolicitante", value, value.ToString());
				
				m_isChanged |= (m_medicosolicitante != value); m_medicosolicitante = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Urgente
		{
			get { return m_urgente; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Urgente", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Urgente", value, value.ToString());
				
				m_isChanged |= (m_urgente != value); m_urgente = value;
			}
		}
        public string Equipo
        {
            get { return m_equipo; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Paciente", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Paciente", value, value.ToString());

                m_isChanged |= (m_equipo != value); m_equipo = value;
            }
        }
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
