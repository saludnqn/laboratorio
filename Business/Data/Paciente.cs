/*
insert license info here
*/
using System;
using System.Collections;
using Business.Data.Laboratorio;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Paciente: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idpaciente; 
        //private IList m_SysHistoriaClinicaList; 
        //private IList m_SysParentescoList; 
		private Efector m_idefector; 
		private int m_historiaclinica; 
		private string m_apellido; 
		private string m_nombre; 
		//private int m_idtipodocumento; 
		private int m_numerodocumento; 
		private int m_idsexo; 
		private DateTime m_fechanacimiento; 
		private int m_idpais; 
		private int m_idprovincia; 
		private int m_idnivelinstruccion;
        private int m_idsituacionlaboral;
        private int m_idprofesion;
        private int m_idocupacion; 
		private string m_calle; 
		private int m_numero; 
		private string m_piso; 
		private string m_departamento; 
		private string m_manzana;
        private int m_idlocalidad;
        private int m_idbarrio;
        private int m_idprovinciadomicilio; 
		private string m_referencia; 
        //private string m_telefono1; 
        //private string m_telefono2;
        private int m_idobrasocial;
        private int m_idestadocivil; 
		private int m_idusuario; 
		private DateTime m_fechaalta; 
		private DateTime m_fechadefuncion; 
		private DateTime m_fechaultimaactualizacion;
        private int m_iddepartamento;
        private int m_idestado;
        private int m_idmotivoni;
        private string m_informacioncontacto; 

		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Paciente()
		{
			m_idpaciente = 0; 			
			m_idefector = new Efector(); 
			m_historiaclinica = 0; 
			m_apellido = String.Empty; 
			m_nombre = String.Empty; 
		//	m_idtipodocumento = 0; 
			m_numerodocumento = 0; 
			m_idsexo = 0; 
			m_fechanacimiento = DateTime.MinValue; 
			m_idpais = 0; 
			m_idprovincia = 0; 
			m_idnivelinstruccion = 0; 
			m_idsituacionlaboral = 0; 
			m_idprofesion = 0; 
			m_idocupacion = 0; 
			m_calle = String.Empty; 
			m_numero = 0; 
			m_piso = String.Empty; 
			m_departamento = String.Empty; 
			m_manzana = String.Empty; 
			m_idlocalidad = 0; 
			m_idbarrio = 0; 
			m_idprovinciadomicilio = 0; 
			m_referencia = String.Empty; 
            //m_telefono1 = String.Empty; 
            //m_telefono2 = String.Empty; 
			m_idobrasocial = 0;
            m_idestadocivil = 0; 
			m_idusuario = 0; 
			m_fechaalta = DateTime.MinValue; 
			m_fechadefuncion = DateTime.MinValue; 
			m_fechaultimaactualizacion = DateTime.MinValue; 
			m_iddepartamento = 0;
            m_idestado =0;
            m_idmotivoni = 0;
            m_informacioncontacto = String.Empty;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Paciente(
			Efector idefector, 
			int historiaclinica, 
			string apellido, 
			string nombre, 
		//	int idtipodocumento, 
			int numerodocumento, 
			int idsexo, 
			DateTime fechanacimiento, 
			int idpais, 
			int idprovincia,
            int idnivelinstrucccion,
            int idsituacionlaboral,
            int idprofesion,
            int idocupacion, 
			string calle, 
			int numero, 
			string piso, 
			string departamento, 
			string manzana,
            int idbarrio,
            int idprovinciadomicilio, 
			string referencia, 
            //string telefono1, 
            //string telefono2,
            int idobrasocial,
            int idestadocivil, 
			int idusuario,
            int idestado,
            int idmotivoni,
            string informacioncontacto, 
			DateTime fechaalta, 
			DateTime fechadefuncion, 
			DateTime fechaultimaactualizacion)
			: this()
		{
			m_idefector = idefector;
			m_historiaclinica = historiaclinica;
			m_apellido = apellido;
			m_nombre = nombre;
		//	m_idtipodocumento = idtipodocumento;
			m_numerodocumento = numerodocumento;
			m_idsexo = idsexo;
			m_fechanacimiento = fechanacimiento;
			m_idpais = idpais;
			m_idprovincia = idprovincia;

    //        m_idestado = idestado;
            m_idmotivoni = idmotivoni;
            m_informacioncontacto = informacioncontacto;

			m_idnivelinstruccion = idnivelinstrucccion;
			m_idsituacionlaboral = idsituacionlaboral;
			m_idprofesion = idprofesion;
			m_idocupacion = idocupacion;
			m_calle = calle;
			m_numero = numero;
			m_piso = piso;
			m_departamento = departamento;
			m_manzana = manzana;
            //m_idlocalidad = IdLocalidad;
			m_idbarrio = idbarrio;
			m_idprovinciadomicilio = idprovinciadomicilio;
			m_referencia = referencia;
            //m_telefono1 = telefono1;
            //m_telefono2 = telefono2;
			m_idobrasocial = idobrasocial;
			m_idestadocivil = idestadocivil;
			m_idusuario = idusuario;
			m_fechaalta = fechaalta;
			m_fechadefuncion = fechadefuncion;
			m_fechaultimaactualizacion = fechaultimaactualizacion;
            //m_iddepartamento = null;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPaciente
		{
			get { return m_idpaciente; }
			set
			{
				m_isChanged |= ( m_idpaciente != value ); 
				m_idpaciente = value;
			}

		}


        /// <summary>
        /// 
        /// </summary>
        public int IdEstado
        {
            get { return m_idestado; }
            set
            {
                m_isChanged |= (m_idestado != value);
                m_idestado = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public int IdMotivoni
        {
            get { return m_idmotivoni; }
            set
            {
                m_isChanged |= (m_idmotivoni != value);
                m_idmotivoni = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string InformacionContacto
        {
            get { return m_informacioncontacto; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for InformacionContacto", value, "null");

                if (value.Length > 800)
                    throw new ArgumentOutOfRangeException("Invalid value for InformacionContacto", value, value.ToString());

                m_isChanged |= (m_informacioncontacto != value); m_informacioncontacto = value;
            }
        }
			
        //public IList SysHistoriaClinicaList
        //{
        //    get
        //    {
        //        return m_SysHistoriaClinicaList;
        //    }
        //    set
        //    {
        //        m_SysHistoriaClinicaList = value;
        //    }
        //}

        //public IList SysParentescoList
        //{
        //    get
        //    {
        //        return m_SysParentescoList;
        //    }
        //    set
        //    {
        //        m_SysParentescoList = value;
        //    }
        //}

		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int HistoriaClinica
		{
			get { return m_historiaclinica; }
			set
			{
				m_isChanged |= ( m_historiaclinica != value ); 
				m_historiaclinica = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Apellido
		{
			get { return m_apellido; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Apellido", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());
				
				m_isChanged |= (m_apellido != value); m_apellido = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        //public int IdTipoDocumento
        //{
        //    get { return m_idtipodocumento; }
        //    set
        //    {
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for IdTipoDocumento", value, "null");

        //        m_isChanged |= ( m_idtipodocumento != value ); 
        //        m_idtipodocumento = value;
        //    }

        //}
			
		/// <summary>
		/// 
		/// </summary>
		public int NumeroDocumento
		{
			get { return m_numerodocumento; }
			set
			{
				m_isChanged |= ( m_numerodocumento != value ); 
				m_numerodocumento = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdSexo
		{
			get { return m_idsexo; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdSexo", value, "null");

				m_isChanged |= ( m_idsexo != value ); 
				m_idsexo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaNacimiento
		{
			get { return m_fechanacimiento; }
			set
			{
				m_isChanged |= ( m_fechanacimiento != value ); 
				m_fechanacimiento = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdPais
		{
			get { return m_idpais; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdPais", value, "null");

				m_isChanged |= ( m_idpais != value ); 
				m_idpais = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdProvincia
		{
			get { return m_idprovincia; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProvincia", value, "null");

				m_isChanged |= ( m_idprovincia != value ); 
				m_idprovincia = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdNivelInstruccion
		{
			get { return m_idnivelinstruccion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdNivelInstrucccion", value, "null");

				m_isChanged |= ( m_idnivelinstruccion != value ); 
				m_idnivelinstruccion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdSituacionLaboral
		{
			get { return m_idsituacionlaboral; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdSituacionLaboral", value, "null");

				m_isChanged |= ( m_idsituacionlaboral != value ); 
				m_idsituacionlaboral = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdProfesion
		{
			get { return m_idprofesion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProfesion", value, "null");

				m_isChanged |= ( m_idprofesion != value ); 
				m_idprofesion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdOcupacion
		{
			get { return m_idocupacion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdOcupacion", value, "null");

				m_isChanged |= ( m_idocupacion != value ); 
				m_idocupacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Calle
		{
			get { return m_calle; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Calle", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Calle", value, value.ToString());
				
				m_isChanged |= (m_calle != value); m_calle = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int Numero
		{
			get { return m_numero; }
			set
			{
				m_isChanged |= ( m_numero != value ); 
				m_numero = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Piso
		{
			get { return m_piso; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Piso", value, "null");
				
				if(  value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Piso", value, value.ToString());
				
				m_isChanged |= (m_piso != value); m_piso = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Departamento
		{
			get { return m_departamento; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Departamento", value, "null");
				
				if(  value.Length > 10)
					throw new ArgumentOutOfRangeException("Invalid value for Departamento", value, value.ToString());
				
				m_isChanged |= (m_departamento != value); m_departamento = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Manzana
		{
			get { return m_manzana; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Manzana", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Manzana", value, value.ToString());
				
				m_isChanged |= (m_manzana != value); m_manzana = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdLocalidad
		{
			get { return m_idlocalidad; }
			set
			{
				m_isChanged |= ( m_idlocalidad != value ); 
				m_idlocalidad = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdBarrio
		{
			get { return m_idbarrio; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdBarrio", value, "null");

				m_isChanged |= ( m_idbarrio != value ); 
				m_idbarrio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdProvinciaDomicilio
		{
			get { return m_idprovinciadomicilio; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProvinciaDomicilio", value, "null");

				m_isChanged |= ( m_idprovinciadomicilio != value ); 
				m_idprovinciadomicilio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Referencia
		{
			get { return m_referencia; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Referencia", value, "null");
				
				if(  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Referencia", value, value.ToString());
				
				m_isChanged |= (m_referencia != value); m_referencia = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        //public string Telefono1
        //{
        //    get { return m_telefono1; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Telefono1", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Telefono1", value, value.ToString());
				
        //        m_isChanged |= (m_telefono1 != value); m_telefono1 = value;
        //    }
        //}
			
        ///// <summary>
        ///// 
        ///// </summary>
        //public string Telefono2
        //{
        //    get { return m_telefono2; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Telefono2", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Telefono2", value, value.ToString());
				
        //        m_isChanged |= (m_telefono2 != value); m_telefono2 = value;
        //    }
        //}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdObraSocial
		{
			get { return m_idobrasocial; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdObraSocial", value, "null");

				m_isChanged |= ( m_idobrasocial != value ); 
				m_idobrasocial = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdEstadoCivil
        {
            get { return m_idestadocivil; }
            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for IdEstadoPaciente", value, "null");

                m_isChanged |= (m_idestadocivil != value);
                m_idestadocivil = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaAlta
		{
			get { return m_fechaalta; }
			set
			{
				m_isChanged |= ( m_fechaalta != value ); 
				m_fechaalta = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaDefuncion
		{
			get { return m_fechadefuncion; }
			set
			{
				m_isChanged |= ( m_fechadefuncion != value ); 
				m_fechadefuncion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaUltimaActualizacion
		{
			get { return m_fechaultimaactualizacion; }
			set
			{
				m_isChanged |= ( m_fechaultimaactualizacion != value ); 
				m_fechaultimaactualizacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdDepartamento
		{
			get { return m_iddepartamento; }
			set
			{
				m_isChanged |= ( m_iddepartamento != value ); 
				m_iddepartamento = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 

        public string getSexo()
        {
            string ret = "Indefinido";
            switch (IdSexo)
            {
                case 1: ret = "Indefinido"; break;
                case 2: ret = "Femenino"; break;
                case 3: ret = "Masculino"; break;
                    
            }
            return ret;
        }

        public string getCodificaHiv(string embarazada)
        {
            throw new NotImplementedException();
        }

       
    }
}
