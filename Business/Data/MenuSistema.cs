/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class MenuSistema: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idmenu; 
		private string m_objeto; 
		private int m_idmenusuperior; 
		private int m_posicion; 
		private string m_icono; 
		private bool m_habilitado; 
		private string m_url; 
		private DateTime m_fechacreacion; 
		private int m_idusuariocreacion; 
		private DateTime m_fechamodificacion; 
		private int m_idusuariomodificacion; 
		private int m_idmodulo; 
		private bool m_esaccion; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public MenuSistema()
		{
			m_idmenu = 0; 
			m_objeto = String.Empty; 
			m_idmenusuperior = 0; 
			m_posicion = 0; 
			m_icono = String.Empty; 
			m_habilitado = false; 
			m_url = String.Empty; 
			m_fechacreacion = DateTime.MinValue; 
			m_idusuariocreacion = 0; 
			m_fechamodificacion = DateTime.MinValue; 
			m_idusuariomodificacion = 0; 
			m_idmodulo =0; 
			m_esaccion = false; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public MenuSistema(
			string objeto, 
			int idmenusuperior, 
			int posicion, 
			string icono, 
			bool habilitado, 
			string url, 
			DateTime fechacreacion, 
			int idusuariocreacion, 
			DateTime fechamodificacion, 
			int idusuariomodificacion, 
			int idmodulo, 
			bool esaccion)
			: this()
		{
			m_objeto = objeto;
			m_idmenusuperior = idmenusuperior;
			m_posicion = posicion;
			m_icono = icono;
			m_habilitado = habilitado;
			m_url = url;
			m_fechacreacion = fechacreacion;
			m_idusuariocreacion = idusuariocreacion;
			m_fechamodificacion = fechamodificacion;
			m_idusuariomodificacion = idusuariomodificacion;
			m_idmodulo = idmodulo;
			m_esaccion = esaccion;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdMenu
		{
			get { return m_idmenu; }
			set
			{
				m_isChanged |= ( m_idmenu != value ); 
				m_idmenu = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Objeto
		{
			get { return m_objeto; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Objeto", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Objeto", value, value.ToString());
				
				m_isChanged |= (m_objeto != value); m_objeto = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdMenuSuperior
		{
			get { return m_idmenusuperior; }
			set
			{
				m_isChanged |= ( m_idmenusuperior != value ); 
				m_idmenusuperior = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int Posicion
		{
			get { return m_posicion; }
			set
			{
				m_isChanged |= ( m_posicion != value ); 
				m_posicion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Icono
		{
			get { return m_icono; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Icono", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Icono", value, value.ToString());
				
				m_isChanged |= (m_icono != value); m_icono = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool Habilitado
		{
			get { return m_habilitado; }
			set
			{
				m_isChanged |= ( m_habilitado != value ); 
				m_habilitado = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Url
		{
			get { return m_url; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Url", value, "null");
				
				if(  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Url", value, value.ToString());
				
				m_isChanged |= (m_url != value); m_url = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaCreacion
		{
			get { return m_fechacreacion; }
			set
			{
				m_isChanged |= ( m_fechacreacion != value ); 
				m_fechacreacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuarioCreacion
		{
			get { return m_idusuariocreacion; }
			set
			{
				m_isChanged |= ( m_idusuariocreacion != value ); 
				m_idusuariocreacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaModificacion
		{
			get { return m_fechamodificacion; }
			set
			{
				m_isChanged |= ( m_fechamodificacion != value ); 
				m_fechamodificacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuarioModificacion
		{
			get { return m_idusuariomodificacion; }
			set
			{
				m_isChanged |= ( m_idusuariomodificacion != value ); 
				m_idusuariomodificacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdModulo
		{
			get { return m_idmodulo; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdModulo", value, "null");

				m_isChanged |= ( m_idmodulo != value ); 
				m_idmodulo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool EsAccion
		{
			get { return m_esaccion; }
			set
			{
				m_isChanged |= ( m_esaccion != value ); 
				m_esaccion = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
