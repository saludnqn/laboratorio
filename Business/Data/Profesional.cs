/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Profesional: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idprofesional; 
		
		private int m_idefector; 
		private string m_apellido; 
		private string m_nombre; 
		private int m_idtipodocumento; 
		private int m_numerodocumento; 
		private string m_matricula; 
		private int m_idusuario; 
		private DateTime m_fechamodificacion; 
		private bool m_activo; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Profesional()
		{
			m_idprofesional = 0; 
	
			m_idefector = 0; 
			m_apellido = String.Empty; 
			m_nombre = String.Empty;
            m_idtipodocumento = 1;// new SysTipoDocumento(); 
			m_numerodocumento = 0; 
			m_matricula = String.Empty; 
			m_idusuario = 0; 
			m_fechamodificacion = DateTime.MinValue; 
			m_activo = false; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Profesional(
			int idefector, 
			string apellido, 
			string nombre, 
			int idtipodocumento, 
			int numerodocumento, 
			string matricula, 
			int idusuario, 
			DateTime fechamodificacion, 
			bool activo)
			: this()
		{
			m_idefector = idefector;
			m_apellido = apellido;
			m_nombre = nombre;
			m_idtipodocumento = idtipodocumento;
			m_numerodocumento = numerodocumento;
			m_matricula = matricula;
			m_idusuario = idusuario;
			m_fechamodificacion = fechamodificacion;
			m_activo = activo;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProfesional
		{
			get { return m_idprofesional; }
			set
			{
				m_isChanged |= ( m_idprofesional != value ); 
				m_idprofesional = value;
			}

		}
			
	

		/// <summary>
		/// 
		/// </summary>
		public int IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Apellido
		{
			get { return m_apellido; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Apellido", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());
				
				m_isChanged |= (m_apellido != value); m_apellido = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        public int IdTipoDocumento
        {
            get { return m_idtipodocumento; }
            set
            {
                m_isChanged |= (m_idtipodocumento != value);
                m_idtipodocumento = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public int NumeroDocumento
		{
			get { return m_numerodocumento; }
			set
			{
				m_isChanged |= ( m_numerodocumento != value ); 
				m_numerodocumento = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Matricula
		{
			get { return m_matricula; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Matricula", value, "null");
				
				if(  value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Matricula", value, value.ToString());
				
				m_isChanged |= (m_matricula != value); m_matricula = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaModificacion
		{
			get { return m_fechamodificacion; }
			set
			{
				m_isChanged |= ( m_fechamodificacion != value ); 
				m_fechamodificacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool Activo
		{
			get { return m_activo; }
			set
			{
				m_isChanged |= ( m_activo != value ); 
				m_activo = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
