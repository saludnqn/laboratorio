/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Permiso: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idpermiso; 
		private int m_idefector; 
		private Perfil m_idperfil; 
		private int m_idmenu; 
		private string m_permisoacceso; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Permiso()
		{
			m_idpermiso = 0; 
			m_idefector =0; 
			m_idperfil = new Perfil(); 
			m_idmenu = 0; 
			m_permisoacceso = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Permiso(
			int idefector, 
			Perfil idperfil, 
			int idmenu, 
			string permisoacceso)
			: this()
		{
			m_idefector = idefector;
			m_idperfil = idperfil;
			m_idmenu = idmenu;
			m_permisoacceso = permisoacceso;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPermiso
		{
			get { return m_idpermiso; }
			set
			{
				m_isChanged |= ( m_idpermiso != value ); 
				m_idpermiso = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Perfil IdPerfil
		{
			get { return m_idperfil; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdPerfil", value, "null");

				m_isChanged |= ( m_idperfil != value ); 
				m_idperfil = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdMenu
		{
			get { return m_idmenu; }
			set
			{
				m_isChanged |= ( m_idmenu != value ); 
				m_idmenu = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public string PermisoAcceso
		{
			get { return m_permisoacceso; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Permiso", value, "null");
				
				if(  value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Permiso", value, value.ToString());
				
				m_isChanged |= (m_permisoacceso != value); m_permisoacceso = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
