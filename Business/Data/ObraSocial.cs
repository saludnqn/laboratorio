/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class ObraSocial : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idobrasocial; 
		private string m_nombre;
        private string m_sigla;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ObraSocial()
		{
			m_idobrasocial = 0; 
			m_nombre = String.Empty;
            m_sigla = String.Empty;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ObraSocial(
			string nombre,
            string sigla)
			: this()
		{
			m_nombre = nombre;
            m_sigla = sigla;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdObraSocial
		{
			get { return m_idobrasocial; }
			set
			{
				m_isChanged |= ( m_idobrasocial != value ); 
				m_idobrasocial = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}

        public string Sigla
        {
            get { return m_sigla; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");

                if (value.Length > 400)
                    throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());

                m_isChanged |= (m_sigla != value); m_sigla = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 

		
			}
}
