/*
insert license info here
*/
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Peticion: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idpeticion; 
		private Efector m_idefector; 
		private DateTime m_fecha; 
		private string m_hora; 
		private Paciente m_idpaciente; 
		private TipoServicio m_idtiposervicio; 
		private bool m_baja; 
		private int m_idprotocolo; 
		private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro; 
		private string m_observaciones;
        private bool m_enviada;
        private Origen m_idorigen;
        private SectorServicio m_idsector;        
        private int m_idsolicitante;
        private string m_sala;
        private string m_cama;
        private int m_idmuestra; 
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Peticion()
		{
			m_idpeticion = 0; 
			m_idefector =new Efector(); 
			m_fecha = DateTime.MinValue; 
			m_hora = String.Empty; 
			m_idpaciente = new Paciente(); 
			m_idtiposervicio = new TipoServicio(); 
			m_baja = false; 
			m_idprotocolo = 0; 
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue; 
			m_observaciones = String.Empty;
            m_enviada = false;
            m_idorigen = new Origen();
            m_idsector = new SectorServicio();
            m_idsolicitante = 0;
            m_sala = String.Empty;
            m_cama = String.Empty;
            m_idmuestra = 0;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Peticion(
			Efector idefector, 
			DateTime fecha, 
			string hora, 
			Paciente idpaciente, 
			TipoServicio idtiposervicio, 
			bool baja, 
			int idprotocolo, 
			Usuario idusuarioregistro, 
			DateTime fecharegistro, 
			string observaciones,
            bool enviada,
            Origen idorigen,
            SectorServicio idsector,
            int idsolicitante,
            string sala,
            string cama, int idmuestra)
			: this()
		{
			m_idefector = idefector;
			m_fecha = fecha;
			m_hora = hora;
			m_idpaciente = idpaciente;
			m_idtiposervicio = idtiposervicio;
			m_baja = baja;
			m_idprotocolo = idprotocolo;
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
			m_observaciones = observaciones;
            m_enviada = enviada;
            m_idorigen = idorigen;
            m_idsector = idsector;
            m_idsolicitante = idsolicitante;
            m_sala = sala;
            m_cama = cama;
            m_idmuestra = idmuestra;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPeticion
		{
			get { return m_idpeticion; }
			set
			{
				m_isChanged |= ( m_idpeticion != value ); 
				m_idpeticion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime Fecha
		{
			get { return m_fecha; }
			set
			{
				m_isChanged |= ( m_fecha != value ); 
				m_fecha = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Hora
		{
			get { return m_hora; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Hora", value, "null");
				
				if(  value.Length > 5)
					throw new ArgumentOutOfRangeException("Invalid value for Hora", value, value.ToString());
				
				m_isChanged |= (m_hora != value); m_hora = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public Paciente IdPaciente
		{
			get { return m_idpaciente; }
			set
			{
				m_isChanged |= ( m_idpaciente != value ); 
				m_idpaciente = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public TipoServicio IdTipoServicio
		{
			get { return m_idtiposervicio; }
			set
			{
				m_isChanged |= ( m_idtiposervicio != value ); 
				m_idtiposervicio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool Baja
		{
			get { return m_baja; }
			set
			{
				m_isChanged |= ( m_baja != value ); 
				m_baja = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProtocolo
		{
			get { return m_idprotocolo; }
			set
			{
				m_isChanged |= ( m_idprotocolo != value ); 
				m_idprotocolo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Observaciones
		{
			get { return m_observaciones; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Observaciones", value, "null");
				
				if(  value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Observaciones", value, value.ToString());
				
				m_isChanged |= (m_observaciones != value); m_observaciones = value;
			}
		}
        /// </summary>
        public bool Enviada
        {
            get { return m_enviada; }
            set
            {
                m_isChanged |= (m_enviada != value);
                m_enviada = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public Origen IdOrigen
        {
            get { return m_idorigen; }
            set
            {
                m_isChanged |= (m_idorigen != value);
                m_idorigen = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public SectorServicio IdSector
        {
            get { return m_idsector; }
            set
            {
                m_isChanged |= (m_idsector != value);
                m_idsector = value;
            }

        }


        /// <summary>
        /// 
        /// </summary>
        public int IdSolicitante
        {
            get { return m_idsolicitante; }
            set
            {
                m_isChanged |= (m_idsolicitante != value);
                m_idsolicitante = value;
            }

        }
			

        /// <summary>
        /// 
        /// </summary>
        public string Sala
        {
            get { return m_sala; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_sala", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_sala", value, value.ToString());

                m_isChanged |= (m_sala != value); m_sala = value;
            }
        }

        public string Cama
        {
            get { return m_cama; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_cama", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_cama", value, value.ToString());

                m_isChanged |= (m_cama != value); m_cama = value;
            }
        }

        public int IdMuestra
        {
            get { return m_idmuestra; }
            set
            {
                m_isChanged |= (m_idmuestra != value);
                m_idmuestra = value;
            }
        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 



        public DataTable GetDataSetComprobante()
        {
            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.CommandText = "[LAB_GetPeticionesPaciente]";

            cmd.Parameters.Add("@idPaciente", SqlDbType.Int);
            cmd.Parameters["@idPaciente"].Value = this.IdPaciente.IdPaciente;

            cmd.Parameters.Add("@idPeticion", SqlDbType.Int);
            cmd.Parameters["@idPeticion"].Value = this.IdPeticion;


            cmd.Connection = conn;


            SqlDataAdapter da = new SqlDataAdapter(cmd);

            da.Fill(Ds);
            //////////

            DataTable data = Ds.Tables[0];

            return data;
        }
	}
}
