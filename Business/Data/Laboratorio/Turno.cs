/*
insert license info here
*/
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Turno : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idturno; 
		private Efector m_idefector; 
		private DateTime m_fecha;
        private string m_hora; 
        private Paciente m_idpaciente;
        private int m_idsector;
        private int m_idespecialistasolicitante; 
        //private int m_dni; 
        //private string m_apellido; 
        //private string m_nombre; 
		private TipoServicio m_idtiposervicio; 
		private ObraSocial m_idobrasocial;
        private int m_idprotocolo;
        private bool m_baja; 
		private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro;
        private int m_iditem;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Turno()
		{
			m_idturno = 0; 
			m_idefector = new Efector(); 
			m_fecha = DateTime.MinValue;
            m_idpaciente = new Paciente();
            m_idsector = 0;
            m_idespecialistasolicitante = 0;
            m_hora = String.Empty;
            //m_dni = 0; 
            //m_apellido = String.Empty; 
            //m_nombre = String.Empty; 
			m_idtiposervicio = new TipoServicio(); 
			m_idobrasocial = new ObraSocial(); 
			m_baja = false;
            m_idprotocolo = 0;
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue;
            m_iditem = 0;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Turno(
			Efector idefector, 
			DateTime fecha,
            string hora,
            Paciente idpaciente,
 
            int idsector,
            int idespecialistasolicitante,
            //string apellido, 
            //string nombre, 
			TipoServicio idtiposervicio, 
			ObraSocial idobrasocial, 
			bool baja, 
            int idprotocolo,
			Usuario idusuarioregistro, 
			DateTime fecharegistro)
			: this()
		{
			m_idefector = idefector;
			m_fecha = fecha;
            m_hora = hora;
            m_idpaciente = idpaciente;
            m_idsector = idsector;
            m_idespecialistasolicitante = idespecialistasolicitante;
            //m_dni = dni;
            //m_apellido = apellido;
            //m_nombre = nombre;
            m_idprotocolo = idprotocolo;
			m_idtiposervicio = idtiposervicio;
			m_idobrasocial = idobrasocial;
			m_baja = baja;
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdTurno
		{
			get { return m_idturno; }
			set
			{
				m_isChanged |= ( m_idturno != value ); 
				m_idturno = value;
			}

		}
        public int IdProtocolo
        {
            get { return m_idprotocolo; }
            set
            {
                m_isChanged |= (m_idprotocolo != value);
                m_idprotocolo = value;
            }

        }

        public int IdSector
        {
            get { return m_idsector; }
            set
            {
                m_isChanged |= (m_idsector != value);
                m_idsector = value;
            }

        }

        public int IdEspecialistaSolicitante
        {
            get { return m_idespecialistasolicitante; }
            set
            {
                m_isChanged |= (m_idespecialistasolicitante != value);
                m_idespecialistasolicitante = value;
            }

        }
		
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime Fecha
		{
			get { return m_fecha; }
			set
			{
				m_isChanged |= ( m_fecha != value ); 
				m_fecha = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
        /// 
        public string Hora
        {
            get { return m_hora; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Apellido", value, "null");

                if (value.Length > 5)
                    throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());

                m_isChanged |= (m_hora != value); m_hora = value;
            }
        }

        public int IdItem
        {
            get { return m_iditem; }
            set
            {
                m_isChanged |= (m_iditem != value);
                m_iditem = value;
            }

        }

        //public int Dni
        //{
        //    get { return m_dni; }
        //    set
        //    {
        //        m_isChanged |= ( m_dni != value ); 
        //        m_dni = value;
        //    }

        //}
			
        ///// <summary>
        ///// 
        ///// </summary>
        //public string Apellido
        //{
        //    get { return m_apellido; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Apellido", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());
				
        //        m_isChanged |= (m_apellido != value); m_apellido = value;
        //    }
        //}
			
        ///// <summary>
        ///// 
        ///// </summary>
        //public string Nombre
        //{
        //    get { return m_nombre; }

        //    set	
        //    {	
        //        if( value == null )
        //            throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
        //        if(  value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
        //        m_isChanged |= (m_nombre != value); m_nombre = value;
        //    }
        //}

        /// <summary>
        /// 
        /// </summary>
        public Paciente IdPaciente
        {
            get { return m_idpaciente; }
            set
            {
                m_isChanged |= (m_idpaciente != value);
                m_idpaciente = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public TipoServicio IdTipoServicio
		{
			get { return m_idtiposervicio; }
			set
			{
				m_isChanged |= ( m_idtiposervicio != value ); 
				m_idtiposervicio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public ObraSocial IdObraSocial
		{
			get { return m_idobrasocial; }
			set
			{
				m_isChanged |= ( m_idobrasocial != value ); 
				m_idobrasocial = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool Baja
		{
			get { return m_baja; }
			set
			{
				m_isChanged |= ( m_baja != value ); 
				m_baja = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 


        public DataTable GetDataSet()
        {
            //string m_strSQL = " SELECT  * from vta_LAB_ImprimirTurno " +
            //                  " WHERE idTurno=" + IdTurno;

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[LAB_ImprimirTurno]";

            cmd.Parameters.Add("@idTurno", SqlDbType.NVarChar);
            cmd.Parameters["@idTurno"].Value = IdTurno.ToString();

            cmd.Connection = conn;
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(Ds);



            //SqlDataAdapter adapter = new SqlDataAdapter();
            //adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            //adapter.Fill(Ds);

           // conn.Close();
         //   adapter.Dispose();
            return Ds.Tables[0];
        }
	}
}
