/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Formula: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idformula; 
		private Efector m_idefector;
        private Item m_iditem; 
        //private string m_nombre; 
		private string m_contenidoformula;
        private int m_operacion;
        private string m_formulacontrol;
        private int m_idtipoformula; 
		private bool m_baja;

        private string m_sexo;
        
        private int m_edaddesde;
        private int m_edadhasta;
        private int m_unidadedad;

        private Usuario m_idusuarioregistro;
        private DateTime m_fecharegistro; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Formula()
		{
			m_idformula = 0; 
			m_idefector = new Efector();
            m_iditem = new Item();
            //m_nombre = String.Empty; 
			m_contenidoformula = String.Empty;
            m_operacion = 0;
            m_formulacontrol = String.Empty;
            m_idtipoformula = 0;

            m_sexo = String.Empty;
            
            m_edaddesde = 0;
            m_edadhasta = 0;
            m_unidadedad = 0;

			m_baja = false;
            m_idusuarioregistro = new Usuario();
            m_fecharegistro = DateTime.MinValue; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Formula(
			Efector idefector, 
            Item iditem,
            //string nombre, 
			string contenidoformula,
            int operacion,
            string formulacontrol,
            int idtipoformula,

            string sexo,            
            int edaddesde,
            int edadhasta,
            int unidadedad,

            Usuario idusuarioregistro, 
			DateTime fecharegistro,
			bool baja)
			: this()
		{
			m_idefector = idefector;
            m_iditem = iditem;
            //m_nombre = nombre;
            m_contenidoformula = contenidoformula;
            m_operacion = operacion;
            m_formulacontrol = formulacontrol;
            m_idtipoformula = idtipoformula;

            m_sexo = sexo;
            
            m_edaddesde = edaddesde;
            m_edadhasta = edadhasta;
            m_unidadedad = unidadedad;

			m_baja = baja;
            m_idusuarioregistro = idusuarioregistro;
            m_fecharegistro = fecharegistro;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdFormula
		{
			get { return m_idformula; }
			set
			{
				m_isChanged |= ( m_idformula != value ); 
				m_idformula = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}


        public Item IdItem
        {
            get { return m_iditem; }
            set
            {
                m_isChanged |= (m_iditem != value);
                m_iditem = value;
            }

        }
        /// <summary>
        /// I:Indiferente; F:Femenino; M:Masculino
        /// </summary>
        public string Sexo
        {
            get { return m_sexo; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Sexo", value, "null");

                if (value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Sexo", value, value.ToString());

                m_isChanged |= (m_sexo != value); m_sexo = value;
            }
        }

    
        /// <summary>
        /// 
        /// </summary>
        public int EdadDesde
        {
            get { return m_edaddesde; }
            set
            {
                m_isChanged |= (m_edaddesde != value);
                m_edaddesde = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public int EdadHasta
        {
            get { return m_edadhasta; }
            set
            {
                m_isChanged |= (m_edadhasta != value);
                m_edadhasta = value;
            }

        }


        public int UnidadEdad
        {
            get { return m_unidadedad; }
            set
            {
                m_isChanged |= (m_unidadedad != value);
                m_unidadedad = value;
            }

        }
		public string ContenidoFormula
		{
			get { return m_contenidoformula; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Formula", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Formula", value, value.ToString());
				
				m_isChanged |= (m_contenidoformula != value); m_contenidoformula = value;
			}
		}


        /// <summary>
        /// 
        /// </summary>
        public int Operacion
        {
            get { return m_operacion; }
            set
            {
                m_isChanged |= (m_operacion != value);
                m_operacion = value;
            }

        }
			

        /// <summary>
        /// 
        /// </summary>
        public string FormulaControl
        {
            get { return m_formulacontrol; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for FormulaControl", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for FormulaControl", value, value.ToString());

                m_isChanged |= (m_formulacontrol != value); m_formulacontrol = value;
            }
        }

        /// <summary>
        /// 1: Formula - 2: Control
        /// </summary>
        public int IdTipoFormula
        {
            get { return m_idtipoformula; }
            set
            {
                m_isChanged |= (m_idtipoformula != value);
                m_idtipoformula = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public bool Baja
		{
			get { return m_baja; }
			set
			{
				m_isChanged |= ( m_baja != value ); 
				m_baja = value;
			}

		}


        /// <summary>
        /// 
        /// </summary>
        public Usuario IdUsuarioRegistro
        {
            get { return m_idusuarioregistro; }
            set
            {
                m_isChanged |= (m_idusuarioregistro != value);
                m_idusuarioregistro = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaRegistro
        {
            get { return m_fecharegistro; }
            set
            {
                m_isChanged |= (m_fecharegistro != value);
                m_fecharegistro = value;
            }

        }
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
