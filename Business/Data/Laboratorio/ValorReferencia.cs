/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class ValorReferencia : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idvalorreferencia; 
		private Efector m_idefector; 
		private Item m_iditem; 
		private string m_sexo; 
		private bool m_todasedades; 
		private int m_edaddesde; 
		private int m_edadhasta;
        private int m_unidadedad;
		private int m_idmetodo;
        private int m_tipovalor;
		private decimal m_valorminimo; 
		private decimal m_valormaximo;
        private string m_observacion;
		
		private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ValorReferencia()
		{
			m_idvalorreferencia = 0; 
			m_idefector = new Efector(); 
			m_iditem = new Item(); 
			m_sexo = String.Empty; 
			m_todasedades = false; 
			m_edaddesde = 0; 
			m_edadhasta = 0;
            m_unidadedad = 0;
			m_idmetodo = 0;
            m_tipovalor = 0;
			m_valorminimo = 0; 
			m_valormaximo = 0;
            m_observacion = String.Empty;
			
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ValorReferencia(
			Efector idefector, 
			Item iditem, 
			string sexo, 
			bool todasedades, 
			int edaddesde, 
			int edadhasta, 
            int unidadedad,
			int idmetodo, 
            int tipovalor,
			decimal valorminimo, 
			decimal valormaximo, 
            string observacion,
			
			Usuario idusuarioregistro, 
			DateTime fecharegistro)
			: this()
		{
			m_idefector = idefector;
			m_iditem = iditem;
			m_sexo = sexo;
			m_todasedades = todasedades;
			m_edaddesde = edaddesde;
			m_edadhasta = edadhasta;
            m_unidadedad = unidadedad;
			m_idmetodo = idmetodo;
            m_tipovalor = tipovalor;
			m_valorminimo = valorminimo;
			m_valormaximo = valormaximo;
            m_observacion = observacion;
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdValorReferencia
		{
			get { return m_idvalorreferencia; }
			set
			{
				m_isChanged |= ( m_idvalorreferencia != value ); 
				m_idvalorreferencia = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Item IdItem
		{
			get { return m_iditem; }
			set
			{
				m_isChanged |= ( m_iditem != value ); 
				m_iditem = value;
			}

		}
			
		/// <summary>
		/// I:Indiferente; F:Femenino; M:Masculino
		/// </summary>
		public string Sexo
		{
			get { return m_sexo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Sexo", value, "null");
				
				if(  value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Sexo", value, value.ToString());
				
				m_isChanged |= (m_sexo != value); m_sexo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool TodasEdades
		{
			get { return m_todasedades; }
			set
			{
				m_isChanged |= ( m_todasedades != value ); 
				m_todasedades = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int EdadDesde
		{
			get { return m_edaddesde; }
			set
			{
				m_isChanged |= ( m_edaddesde != value ); 
				m_edaddesde = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int EdadHasta
		{
			get { return m_edadhasta; }
			set
			{
				m_isChanged |= ( m_edadhasta != value ); 
				m_edadhasta = value;
			}

		}


        public int UnidadEdad
        {
            get { return m_unidadedad; }
            set
            {
                m_isChanged |= (m_unidadedad != value);
                m_unidadedad = value;
            }

        }
		/// <summary>
		/// 
		/// </summary>
		public int IdMetodo
		{
			get { return m_idmetodo; }
			set
			{
				m_isChanged |= ( m_idmetodo != value ); 
				m_idmetodo = value;
			}

		}

        public int TipoValor
        {
            get { return m_tipovalor; }
            set
            {
                m_isChanged |= (m_tipovalor != value);
                m_tipovalor = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public decimal ValorMinimo
		{
			get { return m_valorminimo; }
			set
			{
				m_isChanged |= ( m_valorminimo != value ); 
				m_valorminimo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public decimal ValorMaximo
		{
			get { return m_valormaximo; }
			set
			{
				m_isChanged |= ( m_valormaximo != value ); 
				m_valormaximo = value;
			}

		}

        public string Observacion
        {
            get { return m_observacion; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Descripcion", value, "null");

                if (value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Descripcion", value, value.ToString());

                m_isChanged |= (m_observacion != value); m_observacion = value;
            }
        }
			
	
			
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
