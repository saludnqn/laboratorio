/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Agenda : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idagenda; 
		private Efector m_idefector; 
		private TipoServicio m_idtiposervicio; 
		private DateTime m_fechadesde; 
		private DateTime m_fechahasta; 
		private bool m_baja; 
		private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro;
        private int m_iditem;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Agenda()
		{
			m_idagenda = 0; 
			m_idefector = new Efector(); 
			m_idtiposervicio = new TipoServicio(); 
			m_fechadesde = DateTime.MinValue; 
			m_fechahasta = DateTime.MinValue; 
			m_baja = false; 
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue;
            m_iditem = 0;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Agenda(
			Efector idefector, 
			TipoServicio idtiposervicio, 
			DateTime fechadesde, 
			DateTime fechahasta, 
			bool baja, 
			Usuario idusuarioregistro, 
			DateTime fecharegistro)
			: this()
		{
			m_idefector = idefector;
			m_idtiposervicio = idtiposervicio;
			m_fechadesde = fechadesde;
			m_fechahasta = fechahasta;
			m_baja = baja;
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdAgenda
		{
			get { return m_idagenda; }
			set
			{
				m_isChanged |= ( m_idagenda != value ); 
				m_idagenda = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public TipoServicio IdTipoServicio
		{
			get { return m_idtiposervicio; }
			set
			{
				m_isChanged |= ( m_idtiposervicio != value ); 
				m_idtiposervicio = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaDesde
		{
			get { return m_fechadesde; }
			set
			{
				m_isChanged |= ( m_fechadesde != value ); 
				m_fechadesde = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaHasta
		{
			get { return m_fechahasta; }
			set
			{
				m_isChanged |= ( m_fechahasta != value ); 
				m_fechahasta = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool Baja
		{
			get { return m_baja; }
			set
			{
				m_isChanged |= ( m_baja != value ); 
				m_baja = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
        /// <summary>
        /// 
        /// </summary>
        public int IdItem
        {
            get { return m_iditem; }
            set
            {
                m_isChanged |= (m_iditem != value);
                m_iditem = value;
            }

        }
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
