/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Nomenclador: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private string m_codigo; 
		private string m_descrip; 
		private double m_ug; 
		private double m_valmod; 
		private string m_usuario; 
		private DateTime m_fechamod; 
		private int m_tipoprest; 
		private bool m_consamb;
        private int m_factorproduccion;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Nomenclador()
		{
			m_codigo = String.Empty; 
			m_descrip = String.Empty; 
			m_ug = new double(); 
			m_valmod = new double(); 
			m_usuario = String.Empty; 
			m_fechamod = DateTime.MinValue; 
			m_tipoprest = 0; 
			m_consamb = false;
            m_factorproduccion = -1;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Nomenclador(
			string descrip, 
			double ug, 
			string usuario, 
			DateTime fechamod, 
			bool consamb,
            int factorproduccion)
			: this()
		{
			m_descrip = descrip;
			m_ug = ug;
			m_valmod = 0;
			m_usuario = usuario;
			m_fechamod = fechamod;
			m_tipoprest = 0;
			m_consamb = consamb;
            m_factorproduccion = factorproduccion;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public string Codigo
		{
			get { return m_codigo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Codigo", value, "null");
				
				if(  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Codigo", value, value.ToString());
				
				m_isChanged |= (m_codigo != value); m_codigo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Descrip
		{
			get { return m_descrip; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Descrip", value, "null");
				
				if(  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Descrip", value, value.ToString());
				
				m_isChanged |= (m_descrip != value); m_descrip = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public double Ug
		{
			get { return m_ug; }
			set
			{
				m_isChanged |= ( m_ug != value ); 
				m_ug = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public double ValMod
		{
			get { return m_valmod; }
			set
			{
				m_isChanged |= ( m_valmod != value ); 
				m_valmod = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Usuario
		{
			get { return m_usuario; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Usuario", value, "null");
				
				if(  value.Length > 255)
					throw new ArgumentOutOfRangeException("Invalid value for Usuario", value, value.ToString());
				
				m_isChanged |= (m_usuario != value); m_usuario = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaMod
		{
			get { return m_fechamod; }
			set
			{
				m_isChanged |= ( m_fechamod != value ); 
				m_fechamod = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int TipoPrest
		{
			get { return m_tipoprest; }
			set
			{
				m_isChanged |= ( m_tipoprest != value ); 
				m_tipoprest = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool ConsAmb
		{
			get { return m_consamb; }
			set
			{
				m_isChanged |= ( m_consamb != value ); 
				m_consamb = value;
			}

		}
        public int FactorProduccion
        {
            get { return m_factorproduccion; }
            set
            {
                m_isChanged |= (m_factorproduccion != value);
                m_factorproduccion = value;
            }

        }
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
