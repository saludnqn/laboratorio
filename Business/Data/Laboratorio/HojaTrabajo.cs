/*
insert license info here
*/
using System;
using System.Collections;
using Business.Data.Laboratorio;
using System.Data;
using System.Data.SqlClient;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class HojaTrabajo: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idhojatrabajo; 
		private Efector m_idefector; 
		private Area m_idarea;
        private string m_codigo;
		private int m_formato;
        private string m_responsable;
        private bool m_tipohoja;
        private int m_formatoancho;
        private bool m_baja;

        private bool m_imprimirprioridad;
        private bool m_imprimirorigen;
        private bool m_imprimirapellidonombre;
        private bool m_imprimiredad;
        private bool m_imprimirsexo;
        private bool m_imprimirantecedente;
        private bool m_imprimirfechahora;
        private bool m_imprimircorrelativo;
        private bool m_imprimirmedico;
        private string m_textoinferiorderecha;
        private string m_textoinferiorizquierda;
        private int m_cantidadlineaadicional;

		private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public HojaTrabajo()
		{
			m_idhojatrabajo = 0; 
			m_idefector = new Efector(); 
			m_idarea = new Area(); 
			m_formato = 0;
            m_codigo = String.Empty;
            m_responsable = String.Empty;

            m_imprimirprioridad = true;
            m_imprimirorigen = true;

            m_imprimirapellidonombre = true;
            m_imprimiredad = true;
            m_imprimirsexo = true;
            m_imprimirantecedente = false;

             m_imprimirfechahora=true;
             m_imprimircorrelativo = false;
             m_imprimirmedico = false;
        m_textoinferiorderecha=String.Empty;
        m_textoinferiorizquierda = String.Empty;
            m_baja = false;
            m_tipohoja = false;
            m_cantidadlineaadicional = 0;
            //m_datospaciente = false;
            m_formatoancho = 0;
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public HojaTrabajo(
			Efector idefector, 
			Area idarea, 
			int formato, 
            string responsable,
            string codigo,
			Usuario idusuarioregistro, 
			DateTime fecharegistro,
            bool tipohoja,

            bool imprimirprioridad,
            bool imprimirorigen,
            bool imprimirapellidonombre,
            bool imprimiredad,
            bool imprimirsexo,
            bool imprimirantecedente,

           bool   imprimirfechahora,
            bool imprimircorrelativo,
            bool ìmprimirmedico,
        string textoinferiorderecha,
        string textoinferiorizquierda,
            int cantidadlineaadicional,
            //bool datospaciente,
            int formatoancho,
            bool baja)
			: this()
		{
			m_idefector = idefector;
			m_idarea = idarea;
			m_formato = formato;
            m_codigo = codigo;
            m_responsable = responsable;
            m_baja = baja;
            m_tipohoja = tipohoja;

            m_imprimirorigen = imprimirorigen;
            m_imprimirprioridad = imprimirprioridad;
            m_imprimirapellidonombre = imprimirapellidonombre;
            m_imprimiredad = imprimiredad;
            m_imprimirsexo = imprimirsexo;
            m_cantidadlineaadicional = cantidadlineaadicional;
            //m_datospaciente = datospaciente;
            m_imprimirantecedente = imprimirantecedente;
            m_imprimirfechahora = imprimirfechahora;
            m_imprimircorrelativo = imprimircorrelativo;
            m_imprimirmedico = m_imprimirmedico;
            m_textoinferiorderecha = textoinferiorderecha;
            m_textoinferiorizquierda = textoinferiorizquierda;



            m_formatoancho = formatoancho;
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdHojaTrabajo
		{
			get { return m_idhojatrabajo; }
			set
			{
				m_isChanged |= ( m_idhojatrabajo != value ); 
				m_idhojatrabajo = value;
			}

		}

        public int CantidadLineaAdicional
        {
            get { return m_cantidadlineaadicional; }
            set
            {
                m_isChanged |= (m_cantidadlineaadicional != value);
                m_cantidadlineaadicional = value;
            }

        }
			
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Area IdArea
		{
			get { return m_idarea; }
			set
			{
				m_isChanged |= ( m_idarea != value ); 
				m_idarea = value;
			}

		}


        public string Codigo
        {
            get { return m_codigo; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Formula", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Formula", value, value.ToString());

                m_isChanged |= (m_codigo != value); m_codigo = value;
            }
        }

		/// <summary>
		/// 0: Filas: Protocolos Encabezado: Determinaciones - 1: Filas:Determinaciones Encabezado:Determinaciones
		/// </summary>
		public int Formato
		{
			get { return m_formato; }
			set
			{
				m_isChanged |= ( m_formato != value ); 
				m_formato = value;
			}

		}
        public string Responsable
        {
            get { return m_responsable; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_responsable", value, "null");

                if (value.Length >100)
                    throw new ArgumentOutOfRangeException("Invalid value for m_responsable", value, value.ToString());

                m_isChanged |= (m_responsable != value); m_responsable = value;
            }
        }


        public string TextoInferiorDerecha
        {
            get { return m_textoinferiorderecha; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_textoinferiorderecha", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_textoinferiorderecha", value, value.ToString());

                m_isChanged |= (m_textoinferiorderecha != value); m_textoinferiorderecha = value;
            }
        }


        public string TextoInferiorIzquierda
        {
            get { return m_textoinferiorizquierda; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_textoinferiorizquierda", value, "null");

                if (value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for m_textoinferiorizquierda", value, value.ToString());

                m_isChanged |= (m_textoinferiorizquierda != value); m_textoinferiorizquierda = value;
            }
        }


        public int FormatoAncho
        {
            get { return m_formatoancho; }
            set
            {
                m_isChanged |= (m_formatoancho != value);
                m_formatoancho = value;
            }

        }


        public bool TipoHoja
        {
            get { return m_tipohoja; }
            set
            {
                m_isChanged |= (m_tipohoja != value);
                m_tipohoja = value;
            }

        }

        public bool ImprimirPrioridad
        {
            get { return m_imprimirprioridad; }
            set
            {
                m_isChanged |= (m_imprimirprioridad != value);
                m_imprimirprioridad = value;
            }

        }



        public bool ImprimirOrigen
        {
            get { return m_imprimirorigen; }
            set
            {
                m_isChanged |= (m_imprimirorigen != value);
                m_imprimirorigen = value;
            }

        }

        public bool ImprimirApellidoNombre
        {
            get { return m_imprimirapellidonombre; }
            set
            {
                m_isChanged |= (m_imprimirapellidonombre != value);
                m_imprimirapellidonombre = value;
            }

        }


        public bool ImprimirCorrelativo
        {
            get { return m_imprimircorrelativo; }
            set
            {
                m_isChanged |= (m_imprimircorrelativo != value);
                m_imprimircorrelativo = value;
            }

        }

        public bool ImprimirEdad
        {
            get { return m_imprimiredad; }
            set
            {
                m_isChanged |= (m_imprimiredad != value);
                m_imprimiredad = value;
            }

        }

        public bool ImprimirSexo
        {
            get { return m_imprimirsexo; }
            set
            {
                m_isChanged |= (m_imprimirsexo != value);
                m_imprimirsexo = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        public bool ImprimirAntecedente
        {
            get { return m_imprimirantecedente; }
            set
            {
                m_isChanged |= (m_imprimirantecedente != value);
                m_imprimirantecedente = value;
            }
        }

        ///// <summary>
        ///// 
        ///// </summary>
        public bool ImprimirFechaHora
        {
            get { return m_imprimirfechahora; }
            set
            {
                m_isChanged |= (m_imprimirfechahora != value);
                m_imprimirfechahora = value;
            }
        }

        public bool ImprimirMedico
        {
            get { return m_imprimirmedico; }
            set
            {
                m_isChanged |= (m_imprimirmedico != value);
                m_imprimirmedico = value;
            }

        }

        ///// <summary>
        ///// 
        ///// </summary>
        //public bool Paciente
        //{
        //    get { return m_paciente; }
        //    set
        //    {
        //        m_isChanged |= (m_paciente != value);
        //        m_paciente = value;
        //    }
        //}


        ///// <summary>
        ///// 
        ///// </summary>
        //public bool Edad
        //{
        //    get { return m_edad; }
        //    set
        //    {
        //        m_isChanged |= (m_edad != value);
        //        m_edad = value;
        //    }
        //}



        /// <summary>
        /// 
        /// </summary>
        public bool Baja
        {
            get { return m_baja; }
            set
            {
                m_isChanged |= (m_baja != value);
                m_baja = value;
            }

        }
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 



        public  DataTable GetDataSet_HojaTrabajoPreeliminar()
        {

            string m_strSQL = " SELECT TOP (100) PERCENT 'A' as letra,'1' AS  numero, '' as numeroOrigen,'___' as cantidad, HT.idHojaTrabajo, " +
                " CASE WHEN HT.imprimirPrioridad = 1 THEN 'R' ELSE '' END AS prioridad, '0'  as antecedente ," +
                              " CASE WHEN HT.imprimirorigen = 1 THEN '-A' ELSE '' END AS origen, CHT.textoImprimir AS item, A.nombre AS area, " +
                              " CHT.idDetalleHojaTrabajo AS ORDEN, 'XX/XX/XXXX' AS fecha, HT.responsable, HT.codigo AS codigoHT, " +
                              " CASE WHEN HT.imprimirApellidoNombre = 1 THEN '-Paciente de Prueba' ELSE '' END AS paciente, " +
                              " CASE WHEN HT.imprimirEdad = 1 THEN '-0' ELSE '' END AS edad, CASE WHEN HT.imprimirSexo = 1 THEN '-F' ELSE '' END AS sexo, " +
                              " CASE WHEN HT.imprimirApellidoNombre = 1 OR HT.imprimirEdad = 1 OR HT.imprimirSexo = 1 THEN 1 ELSE 0 END AS datosPaciente," +
                              " HT.textoInferiorIzquierda, HT.textoinferiorDerecha, 1 as ordenProtocolo ,'' as muestra, 1 as idProtocolo, '' as medico " +
                              " FROM         LAB_Area AS A " +
                              " INNER JOIN   LAB_Item AS I ON A.idArea = I.idArea AND A.idEfector = I.idEfector " +
                              " INNER JOIN   LAB_HojaTrabajo AS HT ON HT.idArea = A.idArea " +
                              " INNER JOIN   LAB_DetalleHojaTrabajo AS CHT ON HT.idHojaTrabajo = CHT.idHojaTrabajo AND I.idItem = CHT.idItem " +                           
                              " WHERE  ht.idHojaTrabajo = " + this.IdHojaTrabajo.ToString() +
                              " ORDER BY  CHT.idDetalleHojaTrabajo";


//             SELECT   TOP (100) PERCENT 
//tf.orden,  case when Tf.antecedente=0 then '0' else '1' end as antecedente,

//, 

//,
//, 
//, 
// 0 AS ORDEN, , 
 //,
//FROM         #TableFinal AS TF 
//INNER JOIN   dbo.LAB_Protocolo AS P ON TF.idProtocolo = P.idProtocolo  
//INNER JOIN   dbo.LAB_HojaTrabajo AS HT ON HT.idHojaTrabajo = TF.idHojaTrabajo
//INNER JOIN   dbo.LAB_Area AS A ON A.idArea = HT.idArea 
//INNER JOIN   dbo.LAB_Prioridad AS Pri ON Pri.idPrioridad = P.idPrioridad 
//INNER JOIN   dbo.LAB_Origen AS O ON O.idOrigen = P.idOrigen 

            DataSet Ds = new DataSet();
            SqlConnection conn = (SqlConnection)NHibernateHttpModule.CurrentSession.Connection;
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = new SqlCommand(m_strSQL, conn);
            adapter.Fill(Ds);

            return Ds.Tables[0];

        }
	}
}
