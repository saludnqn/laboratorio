/*
insert license info here
*/
using System;
using System.Collections;
using NHibernate;
using NHibernate.Expression;
using MathParser;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class Item : Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_iditem; 
		private Efector m_idefector; 
		private string m_codigo; 
		private string m_nombre; 
		private string m_descripcion; 
		private string m_tipo; 
		private int m_ordenimpresion; 
		private Area m_idarea; 
		private Efector m_idefectorderivacion; 
		private int m_idunidadmedida;
        private string m_requieremuestra;

        private int m_idcategoria;
        private int m_idtiporesultado;
        private int m_formatodecimal;
        private decimal m_valorminimo;
        private decimal m_valormaximo;
        private int m_iditemreferencia;
        private int m_duracion;

        private int m_idresultadopordefecto;
        private string m_resultadodefecto;
		private bool m_baja; 
		private Usuario m_idusuarioregistro; 
		private DateTime m_fecharegistro;
        private string m_codigonomenclador;
        private bool m_disponible;
        private bool m_codificahiv;
        private int m_multiplicador;
        private int m_limiteturnosdia;
        private bool m_etiquetaadicional;

		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Item()
		{
			m_iditem = 0; 
			m_idefector = new Efector(); 
			m_codigo = String.Empty; 
			m_nombre = String.Empty; 
			m_descripcion = String.Empty; 
			m_tipo = String.Empty; 
			m_ordenimpresion = 0; 
			m_idarea = new Area();
            m_idefectorderivacion = new Efector(); 
			m_idunidadmedida = 0;
            m_requieremuestra = String.Empty;

            m_idcategoria = 0;
            m_idtiporesultado = 0;
            m_formatodecimal = 2;
            m_valorminimo = -1;
            m_valormaximo = -1;
            m_iditemreferencia = 0;
            m_duracion = 1;

            m_idresultadopordefecto = 0;
            m_resultadodefecto = String.Empty;

			m_baja = false; 
			m_idusuarioregistro = new Usuario(); 
			m_fecharegistro = DateTime.MinValue;
            m_codigonomenclador = String.Empty;
            m_codificahiv = false;
            m_disponible = true;
            m_multiplicador = 1;
            m_limiteturnosdia = 0;
            m_etiquetaadicional = false;
            //m_isscreening = false;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Item(
			Efector idefector, 
			string codigo, 
			string nombre, 
			string descripcion, 
			string tipo, 
			Area idarea, 
			Efector idefectorderivacion, 
			int idunidadmedida, 
            string requiereMuestra,

            int idcategoria,
            int idtiporesultado,
            int formatodecimal,
            decimal valorminimo,
            decimal valormaximo,
            int iditemreferencia,
            int duracion,
            
            bool disponible,
			bool baja, 
			Usuario idusuarioregistro, 
			DateTime fecharegistro)
			: this()
		{
			m_idefector = idefector;
			m_codigo = codigo;
			m_nombre = nombre;
			m_descripcion = descripcion;
			m_tipo = tipo;			
			m_idarea = idarea;
			m_idefectorderivacion = idefectorderivacion;
			m_idunidadmedida = idunidadmedida;
            m_requieremuestra = requiereMuestra;
            m_idcategoria = idcategoria;
            m_idtiporesultado = idtiporesultado;
            m_formatodecimal = formatodecimal;
            m_valorminimo = valorminimo;
            m_valormaximo = valormaximo;
            m_iditemreferencia = iditemreferencia;
            m_duracion = duracion;

            m_disponible = disponible;
			m_baja = baja;
			m_idusuarioregistro = idusuarioregistro;
			m_fecharegistro = fecharegistro;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdItem
		{
			get { return m_iditem; }
			set
			{
				m_isChanged |= ( m_iditem != value ); 
				m_iditem = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Codigo
		{
			get { return m_codigo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Codigo", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Codigo", value, value.ToString());
				
				m_isChanged |= (m_codigo != value); m_codigo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Descripcion
		{
			get { return m_descripcion; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Descripcion", value, "null");
				
				if(  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Descripcion", value, value.ToString());
				
				m_isChanged |= (m_descripcion != value); m_descripcion = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Tipo
		{
			get { return m_tipo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Tipo", value, "null");
				
				if(  value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Tipo", value, value.ToString());
				
				m_isChanged |= (m_tipo != value); m_tipo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
        public int OrdenImpresion
        {
            get { return m_ordenimpresion; }
            set
            {
                m_isChanged |= (m_ordenimpresion != value);
                m_ordenimpresion = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public Area IdArea
		{
			get { return m_idarea; }
			set
			{
				m_isChanged |= ( m_idarea != value ); 
				m_idarea = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfectorDerivacion
		{
			get { return m_idefectorderivacion; }
			set
			{
				m_isChanged |= ( m_idefectorderivacion != value ); 
				m_idefectorderivacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUnidadMedida
		{
			get { return m_idunidadmedida; }
			set
			{
				m_isChanged |= ( m_idunidadmedida != value ); 
				m_idunidadmedida = value;
			}

		}
        /// <summary>
        /// 
        /// </summary>
        public string RequiereMuestra
        {
            get { return m_requieremuestra; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_requieremuestra", value, "null");

                if (value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for m_requieremuestra", value, value.ToString());

                m_isChanged |= (m_requieremuestra != value); m_requieremuestra = value;
            }
        }


        /// <summary>
        /// 0:Simple - 1:Compuesta
        /// </summary>
        public int IdCategoria
        {
            get { return m_idcategoria; }
            set
            {
                m_isChanged |= (m_idcategoria != value);
                m_idcategoria = value;
            }

        }

        /// <summary>
        /// 1: Numerico - 2: Texto - 3: Predefinidos
        /// </summary>
        public int IdTipoResultado
        {
            get { return m_idtiporesultado; }
            set
            {
                m_isChanged |= (m_idtiporesultado != value);
                m_idtiporesultado = value;
            }

        }

        public int IdResultadoPorDefecto
        {
            get { return m_idresultadopordefecto; }
            set
            {
                m_isChanged |= (m_idresultadopordefecto != value);
                m_idresultadopordefecto = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// 
        public int FormatoDecimal
        {
            get { return m_formatodecimal; }
            set
            {
                m_isChanged |= (m_formatodecimal != value);
                m_formatodecimal = value;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// 
        public int Multiplicador
        {
            get { return m_multiplicador; }
            set
            {
                m_isChanged |= (m_multiplicador != value);
                m_multiplicador = value;
            }

        }
        public decimal ValorMinimo
        {
            get { return m_valorminimo; }
            set
            {
                m_isChanged |= (m_valorminimo != value);
                m_valorminimo = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public decimal ValorMaximo
        {
            get { return m_valormaximo; }
            set
            {
                m_isChanged |= (m_valormaximo != value);
                m_valormaximo = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public int IdItemReferencia
        {
            get { return m_iditemreferencia; }
            set
            {
                m_isChanged |= (m_iditemreferencia != value);
                m_iditemreferencia = value;
            }

        }

        public int LimiteTurnosDia
        {
            get { return m_limiteturnosdia; }
            set
            {
                m_isChanged |= (m_limiteturnosdia != value);
                m_limiteturnosdia = value;
            }

        }

      
        /// <summary>
        /// 
        /// </summary>
        public int Duracion
        {
            get { return m_duracion; }
            set
            {
                m_isChanged |= (m_duracion != value);
                m_duracion = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public bool Baja
		{
			get { return m_baja; }
			set
			{
				m_isChanged |= ( m_baja != value ); 
				m_baja = value;
			}

		}

        public bool Disponible
        {
            get { return m_disponible; }
            set
            {
                m_isChanged |= (m_disponible != value);
                m_disponible = value;
            }

        }
			
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuarioRegistro
		{
			get { return m_idusuarioregistro; }
			set
			{
				m_isChanged |= ( m_idusuarioregistro != value ); 
				m_idusuarioregistro = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaRegistro
		{
			get { return m_fecharegistro; }
			set
			{
				m_isChanged |= ( m_fecharegistro != value ); 
				m_fecharegistro = value;
			}

		}


        /// <summary>
        /// 
        /// </summary>
        public string CodigoNomenclador
        {
            get { return m_codigonomenclador; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for Codigo", value, "null");

                if (value.Length > 255)
                    throw new ArgumentOutOfRangeException("Invalid value for Codigo", value, value.ToString());

                m_isChanged |= (m_codigonomenclador != value); m_codigonomenclador = value;
            }
        }

        public string ResultadoDefecto
        {
            get { return m_resultadodefecto; }

            set
            {
                if (value == null)
                    throw new ArgumentOutOfRangeException("Null value not allowed for m_resultadoDefecto", value, "null");

                if (value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for m_resultadoDefecto", value, value.ToString());

                m_isChanged |= (m_resultadodefecto != value); m_resultadodefecto = value;
            }
        }

        public bool CodificaHiv
        {
            get { return m_codificahiv; }
            set
            {
                m_isChanged |= (m_codificahiv != value);
                m_codificahiv = value;
            }

        }


        public bool EtiquetaAdicional
        {
            get { return m_etiquetaadicional; }
            set
            {
                m_isChanged |= (m_etiquetaadicional != value);
                m_etiquetaadicional = value;
            }

        }

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 

        #region Public Metodo


        //public string BuscarRecomendaciones()
        //{
        //    string recomendaciones = "";
        //    ISession m_session = NHibernateHttpModule.CurrentSession;
        //    ICriteria crit = m_session.CreateCriteria(typeof(ItemRecomendacion));
        //    crit.Add(Expression.Eq("IdItem", this));
        //    IList detalle = crit.List();
        //    if (detalle.Count > 0)
        //    {
        //        foreach (ItemRecomendacion oDetalle in detalle)
        //        {
        //            if (recomendaciones == "")
        //                recomendaciones = oDetalle.IdRecomendacion.Descripcion;
        //            else
        //                recomendaciones += "\r" + oDetalle.IdRecomendacion.Descripcion;
        //        }
        //    }
        //    return recomendaciones;
        //}

        public bool TieneFormula()
        {
            ISession m_session = NHibernateHttpModule.CurrentSession;
            ICriteria crit = m_session.CreateCriteria(typeof(Formula));
            crit.Add(Expression.Eq("IdItem", this));
            crit.Add(Expression.Eq("IdTipoFormula", 1));
            crit.Add(Expression.Eq("Baja", false));

            IList detalle = crit.List();
            if (detalle.Count > 0)
                return true;
            else
                return false;
        }


        public bool VerificaValoresMinimosMaximos( string valorControl)
        {
            bool devolver = true;
            if (valorControl !="")
            {
                try
                {
                    if (this.IdTipoResultado == 1) //solo para los numericos
                    {
                        decimal m_minimo = this.ValorMinimo;
                        decimal m_maximo = this.ValorMaximo;
                        if ((m_minimo != -1) && (m_maximo != -1))  //si tiene valores minimos y maximos predefinidos
                        {
                            ////Control control1 = Master.FindControl("ContentPlaceHolder1").FindControl("Panel1").FindControl(oItem.IdItem.ToString());
                            ////TextBox txt = txt = (TextBox)control1;
                            decimal valor = decimal.Parse(valorControl, System.Globalization.CultureInfo.InvariantCulture);
                            if (valor < m_minimo)
                                devolver = false; 
                            if (valor > m_maximo)
                                devolver = false;
                        }
                    }
                }
                catch { devolver = false; }
            }
            else  devolver=true;
            return devolver;
        }
        //public string GetValorFormula(Protocolo oProtocolo)
        //{
        //    string valor = "NA";
        //    ISession m_session = NHibernateHttpModule.CurrentSession;
        //    ICriteria crit = m_session.CreateCriteria(typeof(Formula));
        //    crit.Add(Expression.Eq("IdItem", this));
        //    crit.Add(Expression.Eq("IdEfector", this.IdEfector));
        //    crit.Add(Expression.Eq("Baja", false));

        //    IList lista = crit.List();
        //    if (lista.Count > 0)
        //    {
        //        foreach (Formula oFormula in lista)
        //        {
        //            //string[] field = moje.ToString().Split(("/").ToCharArray(), StringSplitOptions);
        //            string formulacalculada = oFormula.ContenidoFormula;
        //            string aux = oFormula.ContenidoFormula.Replace("+", ";");
        //            aux = aux.Replace("-", ";");
        //            aux = aux.Replace("/", ";");
        //            aux = aux.Replace("*", ";");


        //            string[] arr = aux.Split((";").ToCharArray());

        //            foreach (string m in arr)
        //            {
        //                string codigoDet = m.Replace("[", "");
        //                codigoDet = codigoDet.Replace("]", "");
        //                decimal valorEncontrado = BuscarResultadoItem(codigoDet, oProtocolo);
        //                formulacalculada = formulacalculada.Replace("[" + codigoDet + "]", valorEncontrado.ToString());

        //            }

        //            //      valor =System.Web.UI.s formulacalculada.

        //            Parser p = new Parser();
        //            double resultado = 0;
        //            if (p.Evaluate(formulacalculada))
        //                resultado = p.Result;

        //            valor = resultado.ToString();
        //        }
        //    }
        //    return valor;


        //}

        //public decimal BuscarResultadoItem(string codigoDet, Protocolo oPr)
        //{

        //    decimal valor = 0;
        //    Item oItem = new Item();
        //    oItem = (Item)oItem.Get(typeof(Item), "Codigo", codigoDet);
            
        //    ISession m_session = NHibernateHttpModule.CurrentSession;
        //    ICriteria crit = m_session.CreateCriteria(typeof(DetalleProtocolo));
        //    crit.Add(Expression.Eq("IdItem", oItem));
        //    crit.Add(Expression.Eq("IdProtocolo", oPr));
        //    crit.Add(Expression.Eq("IdEfector", oPr.IdEfector));
        //    //crit.Add(Expression.Eq("Baja", false));
        //    IList lista = crit.List();
        //    if (lista.Count > 0)
        //    {
        //        foreach (DetalleProtocolo oDet in lista)
        //        {
        //            valor = oDet.ResultadoNum;
        //        }
        //    }
        //    return valor;
        //}

       

        #endregion


       
    }
}
