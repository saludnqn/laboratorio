/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class TurnoDiagnostico: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idturnodiagnostico; 
		private Turno m_idturno; 
		private Efector m_idefector; 
		private int m_iddiagnostico; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public TurnoDiagnostico()
		{
			m_idturnodiagnostico = 0; 
			m_idturno = new Turno(); 
			m_idefector = new Efector(); 
			m_iddiagnostico = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public TurnoDiagnostico(
			Turno idturno, 
			Efector idefector, 
			int iddiagnostico)
			: this()
		{
			m_idturno = idturno;
			m_idefector = idefector;
			m_iddiagnostico = iddiagnostico;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdTurnoDiagnostico
		{
			get { return m_idturnodiagnostico; }
			set
			{
				m_isChanged |= ( m_idturnodiagnostico != value ); 
				m_idturnodiagnostico = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Turno IdTurno
		{
			get { return m_idturno; }
			set
			{
				m_isChanged |= ( m_idturno != value ); 
				m_idturno = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdDiagnostico
		{
			get { return m_iddiagnostico; }
			set
			{
				m_isChanged |= ( m_iddiagnostico != value ); 
				m_iddiagnostico = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
