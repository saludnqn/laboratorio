/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class ResultadoMicrobiologia: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idresultadomicrobiologia; 
		private int m_idprotocolo; 
		private string m_grupo; 
		private string m_item; 
		private string m_resultado; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ResultadoMicrobiologia()
		{
			m_idresultadomicrobiologia = 0; 
			m_idprotocolo = 0; 
			m_grupo = String.Empty; 
			m_item = String.Empty; 
			m_resultado = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ResultadoMicrobiologia(
			int idprotocolo, 
			string grupo, 
			string item, 
			string resultado)
			: this()
		{
			m_idprotocolo = idprotocolo;
			m_grupo = grupo;
			m_item = item;
			m_resultado = resultado;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdResultadoMicrobiologia
		{
			get { return m_idresultadomicrobiologia; }
			set
			{
				m_isChanged |= ( m_idresultadomicrobiologia != value ); 
				m_idresultadomicrobiologia = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProtocolo
		{
			get { return m_idprotocolo; }
			set
			{
				m_isChanged |= ( m_idprotocolo != value ); 
				m_idprotocolo = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Grupo
		{
			get { return m_grupo; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Grupo", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Grupo", value, value.ToString());
				
				m_isChanged |= (m_grupo != value); m_grupo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Item
		{
			get { return m_item; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Item", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Item", value, value.ToString());
				
				m_isChanged |= (m_item != value); m_item = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Resultado
		{
			get { return m_resultado; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Resultado", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Resultado", value, value.ToString());
				
				m_isChanged |= (m_resultado != value); m_resultado = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
