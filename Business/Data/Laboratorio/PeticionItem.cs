/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class PeticionItem: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idpeticionitem; 
		private Efector m_idefector; 
		private Peticion m_idpeticion; 
		private Item m_iditem; 
		private string m_recomendacion; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public PeticionItem()
		{
			m_idpeticionitem = 0; 
			m_idefector = new Efector(); 
			m_idpeticion = new Peticion(); 
			m_iditem = new Item(); 
			m_recomendacion = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public PeticionItem(
			Efector idefector, 
			Peticion idpeticion, 
			Item iditem, 
			string recomendacion)
			: this()
		{
			m_idefector = idefector;
			m_idpeticion = idpeticion;
			m_iditem = iditem;
			m_recomendacion = recomendacion;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPeticionItem
		{
			get { return m_idpeticionitem; }
			set
			{
				m_isChanged |= ( m_idpeticionitem != value ); 
				m_idpeticionitem = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Peticion IdPeticion
		{
			get { return m_idpeticion; }
			set
			{
				m_isChanged |= ( m_idpeticion != value ); 
				m_idpeticion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Item IdItem
		{
			get { return m_iditem; }
			set
			{
				m_isChanged |= ( m_iditem != value ); 
				m_iditem = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Recomendacion
		{
			get { return m_recomendacion; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Recomendacion", value, "null");
				
				if(  value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Recomendacion", value, value.ToString());
				
				m_isChanged |= (m_recomendacion != value); m_recomendacion = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
