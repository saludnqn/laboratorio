/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data.Laboratorio
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DetalleRutina: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_iddetallerutina; 
		private Efector m_idefector; 
		private Rutina m_idrutina; 
		private Item m_iditem; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DetalleRutina()
		{
			m_iddetallerutina = 0; 
			m_idefector = new Efector(); 
			m_idrutina = new Rutina();
            m_iditem = new Item() ; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public DetalleRutina(
			Efector idefector, 
			Rutina idrutina, 
			Item iditem)
			: this()
		{
			m_idefector = idefector;
			m_idrutina = idrutina;
			m_iditem = iditem;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdDetalleRutina
		{
			get { return m_iddetallerutina; }
			set
			{
				m_isChanged |= ( m_iddetallerutina != value ); 
				m_iddetallerutina = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Rutina IdRutina
		{
			get { return m_idrutina; }
			set
			{
				m_isChanged |= ( m_idrutina != value ); 
				m_idrutina = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Item IdItem
		{
			get { return m_iditem; }
			set
			{
				m_isChanged |= ( m_iditem != value ); 
				m_iditem = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
