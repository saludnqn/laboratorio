/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Usuario: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idusuario; 
		private Efector m_idefector; 
		private Perfil m_idperfil; 
		private string m_apellido; 
		private string m_nombre; 
		private string m_legajo; 
		private string m_username; 
		private string m_password; 
		private bool m_activo;
        private int m_idusuarioactualizacion;
        private DateTime m_fechaactualizacion;
        private string m_firmavalidacion;
        
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Usuario()
		{
			m_idusuario = 0; 
			m_idefector = new Efector(); 
			m_idperfil = new Perfil(); 
			m_apellido = String.Empty; 
			m_nombre = String.Empty; 
			m_legajo = String.Empty; 
			m_username = String.Empty; 
			m_password = String.Empty; 
			m_activo = false;
            m_idusuarioactualizacion = 0;
            m_fechaactualizacion= DateTime.MinValue;
            m_firmavalidacion = String.Empty;
            

		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Usuario(
			bool activo)
			: this()
		{
			m_idefector = new Efector();
			m_idperfil = new Perfil();
			m_apellido = String.Empty;
			m_nombre = String.Empty;
			m_legajo = String.Empty;
			m_username = String.Empty;
			m_password = String.Empty;
			m_activo = activo;
            m_idusuarioactualizacion = 0;
            m_fechaactualizacion = DateTime.MinValue; 

		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Efector IdEfector
		{
			get { return m_idefector; }
			set
			{
				m_isChanged |= ( m_idefector != value ); 
				m_idefector = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Perfil IdPerfil
		{
			get { return m_idperfil; }
			set
			{
				m_isChanged |= ( m_idperfil != value ); 
				m_idperfil = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Apellido
		{
			get { return m_apellido; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());
				
				m_isChanged |= (m_apellido != value); m_apellido = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Legajo
		{
			get { return m_legajo; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Legajo", value, value.ToString());
				
				m_isChanged |= (m_legajo != value); m_legajo = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Username
		{
			get { return m_username; }

			set	
			{	
				if(  value != null &&  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());
				
				m_isChanged |= (m_username != value); m_username = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Password
		{
			get { return m_password; }

			set	
			{	
				if(  value != null &&  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());
				
				m_isChanged |= (m_password != value); m_password = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public bool Activo
		{
			get { return m_activo; }
			set
			{
				m_isChanged |= ( m_activo != value ); 
				m_activo = value;
			}

		}
        /// <summary>
        /// 
        /// </summary>
        public int IdUsuarioActualizacion
        {
            get { return m_idusuario; }
            set
            {
                m_isChanged |= (m_idusuarioactualizacion != value);
                m_idusuarioactualizacion = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime FechaActualizacion
        {
            get { return m_fechaactualizacion; }
            set
            {
                m_isChanged |= (m_fechaactualizacion != value);
                m_fechaactualizacion = value;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public string FirmaValidacion
        {
            get { return m_firmavalidacion; }

            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for m_firmavalidacion", value, value.ToString());

                m_isChanged |= (m_firmavalidacion != value); m_firmavalidacion = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        //public string Matricula
        //{
        //    get { return m_matricula; }

        //    set
        //    {
        //        if (value != null && value.Length > 50)
        //            throw new ArgumentOutOfRangeException("Invalid value for m_matricula", value, value.ToString());

        //        m_isChanged |= (m_matricula != value); m_matricula = value;
        //    }
        //}
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 


        #region Metodos
      

        #endregion

        public bool esHemoterapia()
        {
             var index=this.IdPerfil.Nombre.ToUpper().IndexOf("HEMOTERAPIA");
             if (index > -1) return true;
             else return false;

        }
    }
}
