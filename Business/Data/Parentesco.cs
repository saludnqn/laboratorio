/*
insert license info here
*/
using System;
using System.Collections;

namespace Business.Data
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class Parentesco: Business.BaseDataAccess
	{

		#region Private Members
		private bool m_isChanged;

		private int m_idparentesco; 
	
		private string m_nombre; 
		private string m_apellido; 
		private int m_idtipodocumento; 
		private int m_numerodocumento; 
		private DateTime m_fechanacimiento; 
		private int m_idprovincia; 
		private int m_idpais; 
		private int m_idsituacionlaboral; 
		private int m_idnivelinstruccion; 
		private int m_idprofesion; 
		private Paciente m_idpaciente; 
		private string m_tipoparentesco; 
		private Usuario m_idusuario; 
		private DateTime m_fechamodificacion; 
		private int m_idantecedente; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public Parentesco()
		{
			m_idparentesco = 0; 
			
			m_nombre = String.Empty; 
			m_apellido = String.Empty; 
			m_idtipodocumento = 0; 
			m_numerodocumento = 0; 
			m_fechanacimiento = DateTime.MinValue;
            m_idprovincia = 0;
            m_idpais = 0;
			m_idsituacionlaboral =0; 
			m_idnivelinstruccion = 0; 
			m_idprofesion =0; 
			m_idpaciente = new Paciente(); 
			m_tipoparentesco = String.Empty; 
			m_idusuario = new Usuario(); 
			m_fechamodificacion = DateTime.MinValue; 
			m_idantecedente = 0; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public Parentesco(
			string nombre, 
			string apellido, 
			int idtipodocumento, 
			int numerodocumento, 
			DateTime fechanacimiento, 
			int idprovincia, 
			int idpais, 
			int idsituacionlaboral, 
			int idnivelinstruccion, 
			int idprofesion, 
			Paciente idpaciente, 
			string tipoparentesco, 
			Usuario idusuario, 
			DateTime fechamodificacion, 
			int idantecedente)
			: this()
		{
			m_nombre = nombre;
			m_apellido = apellido;
			m_idtipodocumento = idtipodocumento;
			m_numerodocumento = numerodocumento;
			m_fechanacimiento = fechanacimiento;
			m_idprovincia = idprovincia;
			m_idpais = idpais;
			m_idsituacionlaboral = idsituacionlaboral;
			m_idnivelinstruccion = idnivelinstruccion;
			m_idprofesion = idprofesion;
			m_idpaciente = idpaciente;
			m_tipoparentesco = tipoparentesco;
			m_idusuario = idusuario;
			m_fechamodificacion = fechamodificacion;
			m_idantecedente = idantecedente;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int IdParentesco
		{
			get { return m_idparentesco; }
			set
			{
				m_isChanged |= ( m_idparentesco != value ); 
				m_idparentesco = value;
			}

		}
			
		
		/// <summary>
		/// 
		/// </summary>
		public string Nombre
		{
			get { return m_nombre; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Nombre", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Nombre", value, value.ToString());
				
				m_isChanged |= (m_nombre != value); m_nombre = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Apellido
		{
			get { return m_apellido; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for Apellido", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Apellido", value, value.ToString());
				
				m_isChanged |= (m_apellido != value); m_apellido = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdTipoDocumento
		{
            get { return m_idtipodocumento; }
            set
            {
                m_isChanged |= (m_idtipodocumento != value);
                m_idtipodocumento = value;
            }

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int NumeroDocumento
		{
			get { return m_numerodocumento; }
			set
			{
				m_isChanged |= ( m_numerodocumento != value ); 
				m_numerodocumento = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaNacimiento
		{
			get { return m_fechanacimiento; }
			set
			{
				m_isChanged |= ( m_fechanacimiento != value ); 
				m_fechanacimiento = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProvincia
		{
			get { return m_idprovincia; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProvincia", value, "null");

				m_isChanged |= ( m_idprovincia != value ); 
				m_idprovincia = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdPais
		{
			get { return m_idpais; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdPais", value, "null");

				m_isChanged |= ( m_idpais != value ); 
				m_idpais = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdSituacionLaboral
		{
			get { return m_idsituacionlaboral; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdSituacionLaboral", value, "null");

				m_isChanged |= ( m_idsituacionlaboral != value ); 
				m_idsituacionlaboral = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdNivelInstruccion
		{
			get { return m_idnivelinstruccion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdNivelInstruccion", value, "null");

				m_isChanged |= ( m_idnivelinstruccion != value ); 
				m_idnivelinstruccion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdProfesion
		{
			get { return m_idprofesion; }
			set
			{
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for IdProfesion", value, "null");

				m_isChanged |= ( m_idprofesion != value ); 
				m_idprofesion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public Paciente IdPaciente
		{
			get { return m_idpaciente; }
			set
			{
				m_isChanged |= ( m_idpaciente != value ); 
				m_idpaciente = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string TipoParentesco
		{
			get { return m_tipoparentesco; }

			set	
			{	
				if( value == null )
					throw new ArgumentOutOfRangeException("Null value not allowed for TipoParentesco", value, "null");
				
				if(  value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for TipoParentesco", value, value.ToString());
				
				m_isChanged |= (m_tipoparentesco != value); m_tipoparentesco = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public Usuario IdUsuario
		{
			get { return m_idusuario; }
			set
			{
				m_isChanged |= ( m_idusuario != value ); 
				m_idusuario = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime FechaModificacion
		{
			get { return m_fechamodificacion; }
			set
			{
				m_isChanged |= ( m_fechamodificacion != value ); 
				m_fechamodificacion = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public int IdAntecedente
		{
			get { return m_idantecedente; }
			set
			{
				m_isChanged |= ( m_idantecedente != value ); 
				m_idantecedente = value;
			}

		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return m_isChanged; }
		}
				
		#endregion 
	}
}
